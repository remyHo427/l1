enum ctype {
    ALPHA,
    DIGIT,
    SPACE,
    PUNCT,
};

const _ctype: Record<string[1], ctype> = {
    '\t': ctype.SPACE,
    '\v': ctype.SPACE,
    '\r': ctype.SPACE,
    '\f': ctype.SPACE,
    ' ': ctype.SPACE,
    //
    '&': ctype.PUNCT,
    '\'': ctype.PUNCT,
    '*': ctype.PUNCT,
    '\\': ctype.PUNCT,
    '^': ctype.PUNCT,
    ':': ctype.PUNCT,
    ',': ctype.PUNCT,
    '"': ctype.PUNCT,
    '=': ctype.PUNCT,
    '!': ctype.PUNCT,
    '>': ctype.PUNCT,
    '-': ctype.PUNCT,
    '{': ctype.PUNCT,
    '[': ctype.PUNCT,
    '(': ctype.PUNCT,
    '<': ctype.PUNCT,
    '#': ctype.PUNCT,
    '.': ctype.PUNCT,
    '+': ctype.PUNCT,
    '%': ctype.PUNCT,
    '?': ctype.PUNCT,
    '}': ctype.PUNCT,
    ']': ctype.PUNCT,
    ')': ctype.PUNCT,
    ';': ctype.PUNCT,
    '/': ctype.PUNCT,
    '~': ctype.PUNCT,
    '_': ctype.PUNCT,
    '|': ctype.PUNCT,
    //
    '0': ctype.DIGIT,
    '1': ctype.DIGIT,
    '2': ctype.DIGIT,
    '3': ctype.DIGIT,
    '4': ctype.DIGIT,
    '5': ctype.DIGIT,
    '6': ctype.DIGIT,
    '7': ctype.DIGIT,
    '8': ctype.DIGIT,
    '9': ctype.DIGIT,
    //
    'a': ctype.ALPHA,
    'b': ctype.ALPHA,
    'c': ctype.ALPHA,
    'd': ctype.ALPHA,
    'e': ctype.ALPHA,
    'f': ctype.ALPHA,
    'g': ctype.ALPHA,
    'h': ctype.ALPHA,
    'i': ctype.ALPHA,
    'j': ctype.ALPHA,
    'k': ctype.ALPHA,
    'l': ctype.ALPHA,
    'm': ctype.ALPHA,
    'n': ctype.ALPHA,
    'o': ctype.ALPHA,
    'p': ctype.ALPHA,
    'q': ctype.ALPHA,
    'r': ctype.ALPHA,
    's': ctype.ALPHA,
    't': ctype.ALPHA,
    'u': ctype.ALPHA,
    'v': ctype.ALPHA,
    'w': ctype.ALPHA,
    'x': ctype.ALPHA,
    'y': ctype.ALPHA,
    'z': ctype.ALPHA,
    'A': ctype.ALPHA,
    'B': ctype.ALPHA,
    'C': ctype.ALPHA,
    'D': ctype.ALPHA,
    'E': ctype.ALPHA,
    'F': ctype.ALPHA,
    'G': ctype.ALPHA,
    'H': ctype.ALPHA,
    'I': ctype.ALPHA,
    'J': ctype.ALPHA,
    'K': ctype.ALPHA,
    'L': ctype.ALPHA,
    'M': ctype.ALPHA,
    'N': ctype.ALPHA,
    'O': ctype.ALPHA,
    'P': ctype.ALPHA,
    'Q': ctype.ALPHA,
    'R': ctype.ALPHA,
    'S': ctype.ALPHA,
    'T': ctype.ALPHA,
    'U': ctype.ALPHA,
    'V': ctype.ALPHA,
    'W': ctype.ALPHA,
    'X': ctype.ALPHA,
    'Y': ctype.ALPHA,
    'Z': ctype.ALPHA,
};

const isalpha = (c: string[1]) => _ctype[c] == ctype.ALPHA;
const isdigit = (c: string[1]) => _ctype[c] == ctype.DIGIT;
const ispunct = (c: string[1]) => _ctype[c] == ctype.PUNCT;
const isspace = (c: string[1]) => _ctype[c] == ctype.SPACE;

export { isalpha, isdigit, ispunct, isspace }